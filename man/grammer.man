------------------------------------------------------------------------

program:
    | [ unit ]

unit:
    | FILE [ declaration ] EOF

declaration:
    | vardecl
    | classdecl
    | assignment

vardecl:
    | TYPE ID ';'
    | TYPE ID { ',' ID } ';'
    | TYPE assignment 
    | TYPE assignment { [ ',' assignment ] } 

TYPE:
    | ID
    | ID '<' TYPE [ ',' TYPE] '>'
    | ID '<' TYPE [ ',' TYPE] '->' TYPE [ ',' TYPE ] '>'

funcdecl:
    | '{' [ statement ] '}'
    | '[' ID ']' '{' [ statement ] '}'
    | '[' ID [ ',' ID ] ']' '{' [ statement ] '}'

statement:
    | preproc
    | ifState
    | forState
    | whileState
    | return
    | assignment
    | vardecl
    | expr ';'
    | ';'

classdecl:
    | TODO

ifState:
    | 'if' '(' condition ')' [ statement ] 
    | 'if' '(' condition ')' [ statement ] 'else' [ statement ]
    | 'if' '(' condition ')' [ statement ] 'else' ifState

forState:
    TODO

whileState:
    | 'while' '(' condition ')' statement
    | 'while' '(' condition ')' [ statement ]

return:
    | 'return' ';'
    | 'return' expr ';'

expr:
    | logic 
    | funcCall
    | 'true'
    | 'false'

assignment:
    | ID '=' expr ';'
    | ID '+=' expr ';'
    | ID '-=' expr ';'
    | ID '*=' expr ';'
    | ID '/=' expr ';'
    | ID '%=' expr ';'
    | ID '&=' expr ';'
    | ID '|=' expr ';'
    | ID '^=' expr ';'
    | ID '=' funcdecl

condition:
    | expr [ '==' expr ]
    | expr [ '!=' expr ]
    | expr [ '<'  expr ]
    | expr [ '>'  expr ]
    | expr [ '<=' expr ]
    | expr [ '>=' expr ]
    | expr [ '&&' expr ]
    | expr [ '||' expr ]
    | expr [ '^^' expr ]
    | expr
    
logic:
    | summand [ '&'  summand ]
    | summand [ '|'  summand ]
    | summand [ '^'  summand ]
    | summand [ '<<' summand ]
    | summand [ '>>' summand ]
    | summand

summand:
    | factor [ '+' factor ]
    | factor [ '-' factor ]
    | factor

factor:
    | unary [ '*' unary ]
    | unary [ '/' unary ]
    | unary [ '%' unary ]
    | unary

unary:
    | '-' value
    | '!' value
    | '~' value
    | '++' value
    | '--' value
    | value '++'
    | value '--'
    | value

value:
    | ID
    | INT
    | FLOAT
    | STRING
    | CHAR
    | '(' expr ')'

------------------------------------------------------------------------

unit: {
    location:   string,
    inst:       [declaration]
}

preproc: {
    location:   string,
    directive:  string
    args:       [any]
}

type: {
    location:   string,
    name:       id,
    generics:   [type],
    returns:    [type]
}

vardecl: {
    location:   string,
    type:       type,
    name:       id,
}

varassign: {
    location:   string,
    name:       id,
    op:         string,
    value:      expr | funcdecl | const
}

funcdecl: {
    location:   string,
    args:       [id],
    body:       [statement]
}

ifstate: {
    location:   string,
    condition:  expr,
    if:         [statement],
    elif:       [ifstate], // this does not contain elif or else
    else:       [statement]
}

whilestate: {
    location:   string,
    condition:  expr,
    if:        [statement]
}

returnstate: {
    location:   string,
    value:      expr
}

expr: {
    location:   string,
    op:         string,
    left:       expr | const,
    right:      expr | const
}

------------------------------------------------------------------------

variable: {
    scope:      [int], 
    id:         int  
    type:       type,
    name:       id,
}

function: {
    scope:      [int],   
    id:         int,     // temp name given to function, i.e. .f0
    args:       [id]
}